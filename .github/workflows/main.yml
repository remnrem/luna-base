name: lunabase CI

on:
  push:
    branches: master
    tags: v*
  pull_request:
    branches: master
    tags: v*

jobs:
  windows-build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: zip mingw-w64-x86_64-cmake git gcc mingw-w64-x86_64-toolchain mingw-w64-x86_64-zlib mingw-w64-x86_64-fftw
      - run: |
          cd ${HOME}
          git clone --recursive https://github.com/microsoft/LightGBM
          cd LightGBM
          mkdir build
          cd build
          /mingw64/bin/cmake.exe -G "MinGW Makefiles"  ..
          mingw32-make.exe -j4
          cp ${HOME}/LightGBM/lib_lightgbm.dll /mingw64/bin/
      - uses: actions/checkout@v2
      - run: |
          mingw32-make.exe ARCH=WINDOWS LGBM=1 LGBM_PATH=${HOME}/LightGBM
          ref='refs/tags/v'
          if [[ ${{ github.ref }} == *${ref}* ]]; then
            v=$(echo ${{ github.ref }} | cut -d'/' -f3)
            mkdir luna-${v}
            cp *.exe /mingw64/bin/libfftw3-3.dll /mingw64/bin/lib_lightgbm.dll /mingw64/bin/libgcc_s_seh-1.dll /mingw64/bin/libgomp-1.dll /mingw64/bin/libwinpthread-1.dll luna-${v}/
            zip -r win-luna.zip luna-${v}
          fi
      - uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: win-luna.zip
          path: ./win-luna.zip
  macos-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install LightGBM
        run: |
          cd ${HOME}
          brew install cmake
          brew install libomp
          git clone --recursive https://github.com/microsoft/LightGBM 
          cd LightGBM
          mkdir build
          cd build
          cmake ..
          make -j4
      - name: Install fftw
        run: |
          cd $HOME
          wget http://www.fftw.org/fftw-3.3.8.tar.gz
          tar -xzvf fftw-3.3.8.tar.gz
          cd fftw-3.3.8
          ./configure --prefix=${HOME}/fftw-3.3.8/
          make
          make install
          cd ${GITHUB_WORKSPACE}
      - name: Make
        run: |
             cp ${HOME}/LightGBM/lib_lightgbm.so .
             make ARCH=MAC FFTW=${HOME}/fftw-3.3.8 LGBM=1 LGBM_PATH=${HOME}/LightGBM
             ref='refs/tags/v'
             if [[ ${{ github.ref }} == *${ref}* ]]; then
               v=$(echo ${{ github.ref }} | cut -d'/' -f3)
               mkdir luna-${v}
               cp luna destrat behead lib_lightgbm.so luna-${v}/
               cd luna-${v}/
               install_name_tool -add_rpath  @executable_path/. ./luna
               install_name_tool -add_rpath  @executable_path/. ./destrat
               install_name_tool -add_rpath  @executable_path/. ./behead
               otool -l ./luna
               cd ..
               tar cvzf mac-luna.tar.gz luna-${v}/
             fi
      - uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          name: mac-luna.tar.gz
          path: mac-luna.tar.gz
  linux-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install fftw
        run: |
          cd ${HOME}
          wget http://www.fftw.org/fftw-3.3.8.tar.gz
          tar -xzvf fftw-3.3.8.tar.gz
          cd fftw-3.3.8
          ./configure --enable-shared --prefix=${HOME}/fftw-3.3.8/
          make
          make install
      - name: Install LightGBM
        run: |
          cd ${HOME}
          git clone --recursive https://github.com/microsoft/LightGBM
          cd LightGBM
          mkdir build
          cd build
          cmake ..
          make -j4
          cd ${GITHUB_WORKSPACE}
      - name: make
        run: |
          make FFTW=${HOME}/fftw-3.3.8 LGBM=1 LGBM_PATH=${HOME}/LightGBM
  release:
    runs-on: ubuntu-latest
    needs: [linux-build,macos-build,windows-build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Luna_Release ${{ github.ref }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v2
        id: download
        with:
          path: .   
      - run: |
          echo ${{steps.download.outputs.download-path}}
          cd ${{steps.download.outputs.download-path}}
          mv mac-luna.tar.gz/mac-luna.tar.gz mac_luna.tar.gz
          mv win-luna.zip/win-luna.zip win_luna.zip
      - name: Upload Release Asset Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: mac_luna.tar.gz
          asset_name: mac_luna.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset Win
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: win_luna.zip
          asset_name: win_luna.zip
          asset_content_type: application/zip

